syntax = "proto3";

import "google/protobuf/empty.proto";

package libnetwork;

service VirtualTennis {
    rpc SendBallStatus (BallStatus) returns (GeneralResponse) {}
    rpc GetBallStatus (BallStatusRequest) returns (BallStatus) {}
    rpc SendRacketStatus (RacketStatus) returns (GeneralResponse) {}
    rpc GetRacketStatus (RacketStatusRequest) returns (RacketStatus) {}
    rpc SendScoreBoard (ScoreBoard) returns (GeneralResponse) {}
    rpc GetScoreBoard (ScoreBoardRequest) returns (ScoreBoard) {}
    rpc ChangeTurn (ChangeTurnRequest) returns (GeneralResponse) {}
    rpc GetCurrentTurn (CurrentTurnRequest) returns (CurrentTurnResponse) {}
    rpc StartNewRound (StartNewRoundRequest) returns (StartNewRoundResponse) {}
    rpc EndRound (RoundEndingRequest) returns (RoundEndingResponse) {}
    rpc Broadcast (ServerBroadcast) returns (google.protobuf.Empty) {}
    rpc ConnectServer (ClientConnectionRequest) returns (ClientConnectionResponse) {}
    rpc DisconnectServer (ClientDisconnectRequest) returns (GeneralResponse) {}
    rpc GetOpponentName (PlayerInfo) returns (PlayerInfo) {}
}

message PlayerInfo {
    uint32 player_id = 1;
    string player_name = 2;
}

// 4x4 row major transform matrix that tranforms 3d points from one frame to
// another.
message Transform{
    repeated double transform = 1;
}

message Velocity {
    // Velocity in m/s.
    float v_x = 1;
    float v_y = 2;
    float v_z = 3;

    // Angular velocity in rad/s.
    double w_x = 4;
    double w_y = 5;
    double w_z = 6;
}

enum FlyingStatus {
    UNKNOWN = 0;
    WAITING_START = 1;
    FLYING = 2;
    HIT_WITH_RACKET = 3;
    HIT_WITH_TABLE = 4;
    HIT_WITH_NET = 5;
    OUT_OF_BOUND = 6;
}

message BallStatus {
    uint32 ball_id = 1;
    Transform pose = 2;
    Velocity velocity = 3;
    FlyingStatus flying_status = 4;
}

// RacketStatusResponse
// ChangeTurnResponse
// BallStatusResponse
// ScoreBoardResponse
message GeneralResponse {
    bool result = 1;
    string detail = 2;
}

message RacketStatus {
    uint32 player_id = 1;
    Transform pose = 2;
    Velocity velocity = 3;
}

message ChangeTurnRequest {
}

message StartNewRoundRequest {
    PlayerInfo player_info = 1;
}

message StartNewRoundResponse {
    PlayerInfo player_info = 1;
}

message RoundEndingRequest {
    uint32 winner_id = 1;
}

message RoundEndingResponse {
    bool result = 1;
    ScoreBoard score_board = 2;
}

message ScoreBoard {
    uint32 player_1_score = 1;
    uint32 player_2_score = 2;
    uint32 maximum_score = 3;
}

message ServerBroadcast {
    string ip_address = 1;
    string host_name = 2;
}

message ClientConnectionRequest {
    string player_name = 1;
}

message ClientConnectionResponse {
    bool result = 1;
    string detail = 2;
    PlayerInfo player_info = 3;
}

message BallStatusRequest {
}

message RacketStatusRequest {
    uint32 player_id = 1;
}

message ScoreBoardRequest {
}

message CurrentTurnRequest {
}

message CurrentTurnResponse {
    uint32 turn_owner = 1;
}

message ClientDisconnectRequest {
}