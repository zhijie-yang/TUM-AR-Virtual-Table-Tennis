syntax = "proto3";

import "google/protobuf/empty.proto";

package libnetwork;

service VirtualTennis {
    rpc SendBallStatus (BallStatus) returns (BallStatusResponse) {}
    rpc SendRacketStatus (RacketStatus) returns (RacketStatusResponse) {}
    rpc SendScoreBoard (ScoreBoard) returns (ScoreBoardResponse) {}
    rpc ChangeTurn (ChangeTurnRequest) returns (ChangeTurnResponse) {}
    rpc StartNewRound (StartNewRoundRequest) returns (StartNewRoundResponse) {}
    rpc EndRound (RoundEndingRequest) returns (RoundEndingResponse) {}
    rpc Broadcast (ServerBroadcast) returns (google.protobuf.Empty) {}
    rpc ConnectServer (ClientConnectionRequest) returns (ClientConnectionResponse) {}
}

message PlayerInfo {
    uint32 player_id = 1;
    string player_name = 2;
}

// 4x4 row major transform matrix that tranforms 3d points from one frame to
// another.
message Transform{
    repeated double transform = 1;
}

message Velocity {
    // Velocity in m/s.
    float v_x = 1;
    float v_y = 2;
    float v_z = 3;

    // Angular velocity in rad/s.
    double w_x = 4;
    double w_y = 5;
    double w_z = 6;
}

message BallStatus {
    uint32 ball_id = 1;
    Transform pose = 2;
    Velocity velocity = 3;
    enum status {
        UNKNOWN = 0;
        WAITING_START = 1;
        FLYING = 2;
        HIT_WITH_RACKET = 3;
        HIT_WITH_TABLE = 4;
        HIT_WITH_NET = 5;
        OUT_OF_BOUND = 6;
    }
}

message BallStatusResponse {
    bool result = 1;
    string detail = 2;
}

message RacketStatus {
    uint32 player_id = 1;
    Transform pose = 2;
    Velocity velocity = 3;
}

message RacketStatusResponse {
    bool result = 1;
    string detail = 2;
}

message ChangeTurnRequest {
    uint32 new_id = 1;
}

message ChangeTurnResponse {
    bool result = 1;
    string detail = 2;
}

message StartNewRoundRequest {
    PlayerInfo player_info = 1;
}

message StartNewRoundResponse {
    PlayerInfo player_info = 1;
}

message RoundEndingRequest {
    uint32 winner_id = 1;
}

message RoundEndingResponse {
    bool result = 1;
    ScoreBoard score_board = 2;
}

message ScoreBoard {
    uint32 player_1_score = 1;
    uint32 player_2_score = 2;
}

message ScoreBoardResponse {
    bool result = 1;
    string detail = 2;
}

message ServerBroadcast {
    string ip_address = 1;
    string host_name = 2;
}

message ClientConnectionRequest {
    string server_ip_address = 1;
    PlayerInfo player_info = 2;
    uint32 port_number = 3;
}

message ClientConnectionResponse {
    bool result = 1;
    string detail = 2;
    PlayerInfo player_info = 3;
}
